import pygame
import os
import random

pygame.init()

# Screen setup
WIDTH, HEIGHT = 800, 800
ROWS, COLS = 8, 8
SQUARE_SIZE = WIDTH // COLS
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Chess Board")

# Fonts
pygame.font.init()
SMALL_FONT = pygame.font.SysFont("Arial", 36, bold=True)

# Colors
LIGHT_COLOR = (240, 217, 181)
DARK_COLOR = (181, 136, 99)
HIGHLIGHT_COLOR_LIGHT = (246, 246, 105)
HIGHLIGHT_COLOR_DARK = (180, 180, 30)
LAST_MOVE_COLOR = (255, 223, 88)
SELECTED_COLOR = (255, 160, 122)
CHECK_COLOR = (255, 99, 71)

# Load piece images
PIECE_IMAGES = {}
def load_piece_images():
    pieces = [
        "wP", "wR", "wN", "wB", "wQ", "wK",
        "bP", "bR", "bN", "bB", "bQ", "bK"
    ]
    for piece in pieces:
        PIECE_IMAGES[piece] = pygame.transform.scale(
            pygame.image.load(os.path.join("pieces", f"{piece}.png")),
            (SQUARE_SIZE, SQUARE_SIZE)
        )

# Chessboard setup
INITIAL_BOARD = [
    ["bR","bN","bB","bQ","bK","bB","bN","bR"],
    ["bP","bP","bP","bP","bP","bP","bP","bP"],
    ["",  "",  "",  "",  "",  "",  "",  "" ],
    ["",  "",  "",  "",  "",  "",  "",  "" ],
    ["",  "",  "",  "",  "",  "",  "",  "" ],
    ["",  "",  "",  "",  "",  "",  "",  "" ],
    ["wP","wP","wP","wP","wP","wP","wP","wP"],
    ["wR","wN","wB","wQ","wK","wB","wN","wR"]
]

selected_piece = None
selected_pos = None
legal_moves = []
current_turn = 'w'
last_move = None
game_over = False
winner = None  # "White" or "Black"

# Keep track of King and Rook movement for castling
piece_has_moved = {
    (0,4): False,  # Black King (e8)
    (0,0): False,  # Black Rook a8
    (0,7): False,  # Black Rook h8
    (7,4): False,  # White King (e1)
    (7,0): False,  # White Rook a1
    (7,7): False   # White Rook h1
}

def draw_square(color, position):
    pygame.draw.rect(screen, color, position)

def highlight_squares(squares, color_light, color_dark):
    """
    Fills squares[] with a highlight that depends on
    whether the square is 'light' or 'dark'.
    """
    for (r, f) in squares:
        base_color = color_light if (r + f) % 2 == 0 else color_dark
        rect = (f * SQUARE_SIZE, r * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        pygame.draw.rect(screen, base_color, rect)

def draw_board():
    """
    Draw the board, highlight squares, draw pieces,
    and show if there's a check/checkmate.
    """
    # 1. Draw squares
    for file in range(COLS):
        for rank in range(ROWS):
            square_color = LIGHT_COLOR if (file + rank) % 2 != 0 else DARK_COLOR
            x, y = file * SQUARE_SIZE, rank * SQUARE_SIZE
            draw_square(square_color, (x, y, SQUARE_SIZE, SQUARE_SIZE))

    # 2. Highlight last move squares
    if last_move:
        for (r, f) in last_move:
            rect = (f * SQUARE_SIZE, r * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
            pygame.draw.rect(screen, LAST_MOVE_COLOR, rect)

    # 3. Highlight selected square
    if selected_piece and selected_pos is not None:
        (sel_r, sel_f) = selected_pos
        rect = (sel_f * SQUARE_SIZE, sel_r * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
        pygame.draw.rect(screen, SELECTED_COLOR, rect)

    # 4. Draw pieces (unless currently dragging)
    for rank in range(ROWS):
        for file in range(COLS):
            piece = INITIAL_BOARD[rank][file]
            if piece and not (selected_piece and (rank, file) == selected_pos):
                x, y = file * SQUARE_SIZE, rank * SQUARE_SIZE
                screen.blit(PIECE_IMAGES[piece], (x, y))

    # 5. Highlight legal moves
    if legal_moves:
        highlight_squares(legal_moves, HIGHLIGHT_COLOR_LIGHT, HIGHLIGHT_COLOR_DARK)

    # 6. Highlight king in check with a red border
    for color in ['w', 'b']:
        if is_king_in_check(color):
            king_positions = [
                (r, f) for r in range(ROWS) for f in range(COLS)
                if INITIAL_BOARD[r][f] == color + "K"
            ]
            if king_positions:
                kr, kf = king_positions[0]
                check_rect = pygame.Rect(kf * SQUARE_SIZE, kr * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
                pygame.draw.rect(screen, CHECK_COLOR, check_rect, 4)

    # 7. Checkmate overlay
    if game_over and winner:
        display_text = f"Checkmate! {winner} wins!"
        text_surface = SMALL_FONT.render(display_text, True, (255, 255, 255))

        # Center text
        text_x = (WIDTH - text_surface.get_width()) // 2
        text_y = (HEIGHT - text_surface.get_height()) // 2

        padding = 10
        box_rect = pygame.Rect(
            text_x - padding,
            text_y - padding,
            text_surface.get_width() + 2*padding,
            text_surface.get_height() + 2*padding
        )
        pygame.draw.rect(screen, (0,0,0), box_rect)
        screen.blit(text_surface, (text_x, text_y))

def is_valid_position(rank, file):
    return 0 <= rank < ROWS and 0 <= file < COLS

def generate_moves_in_directions(rank, file, directions, max_steps=8):
    moves = []
    color = INITIAL_BOARD[rank][file][0]
    for dr, df in directions:
        for step in range(1, max_steps+1):
            r, f = rank + dr*step, file + df*step
            if not is_valid_position(r, f):
                break
            if INITIAL_BOARD[r][f] == "":
                moves.append((r, f))
            elif INITIAL_BOARD[r][f][0] != color:
                moves.append((r, f))
                break
            else:
                break
    return moves

def is_king_in_check(color):
    king_pos = [
        (r, f) for r in range(ROWS)
        for f in range(COLS)
        if INITIAL_BOARD[r][f] == color + "K"
    ]
    if not king_pos:
        return False
    kr, kf = king_pos[0]
    opp_color = 'b' if color == 'w' else 'w'
    for r in range(ROWS):
        for c in range(COLS):
            piece = INITIAL_BOARD[r][c]
            if piece and piece[0] == opp_color:
                possible = get_potential_moves(piece, r, c)
                if (kr, kf) in possible:
                    return True
    return False

def can_castle_kingside(color):
    if color == 'w':
        king_start = (7,4)
        rook_start = (7,7)
        rank = 7
    else:
        king_start = (0,4)
        rook_start = (0,7)
        rank = 0

    if piece_has_moved.get(king_start, False):
        return False
    if piece_has_moved.get(rook_start, False):
        return False

    if INITIAL_BOARD[rank][5] != "" or INITIAL_BOARD[rank][6] != "":
        return False

    if is_king_in_check(color):
        return False

    saved_king = INITIAL_BOARD[king_start[0]][king_start[1]]

    # step on (rank,5)
    saved_5 = INITIAL_BOARD[rank][5]
    INITIAL_BOARD[rank][5] = saved_king
    INITIAL_BOARD[king_start[0]][king_start[1]] = ""
    if is_king_in_check(color):
        INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
        INITIAL_BOARD[rank][5] = saved_5
        return False
    # revert
    INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
    INITIAL_BOARD[rank][5] = saved_5

    # step on (rank,6)
    saved_6 = INITIAL_BOARD[rank][6]
    INITIAL_BOARD[rank][6] = saved_king
    INITIAL_BOARD[king_start[0]][king_start[1]] = ""
    can_castle = True
    if is_king_in_check(color):
        can_castle = False
    # revert
    INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
    INITIAL_BOARD[rank][6] = saved_6

    return can_castle

def can_castle_queenside(color):
    if color == 'w':
        king_start = (7,4)
        rook_start = (7,0)
        rank = 7
    else:
        king_start = (0,4)
        rook_start = (0,0)
        rank = 0

    if piece_has_moved.get(king_start, False):
        return False
    if piece_has_moved.get(rook_start, False):
        return False

    if (INITIAL_BOARD[rank][1] != "" or
        INITIAL_BOARD[rank][2] != "" or
        INITIAL_BOARD[rank][3] != ""):
        return False

    if is_king_in_check(color):
        return False

    saved_king = INITIAL_BOARD[king_start[0]][king_start[1]]

    # step on (rank,3)
    saved_3 = INITIAL_BOARD[rank][3]
    INITIAL_BOARD[rank][3] = saved_king
    INITIAL_BOARD[king_start[0]][king_start[1]] = ""
    if is_king_in_check(color):
        INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
        INITIAL_BOARD[rank][3] = saved_3
        return False
    # revert
    INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
    INITIAL_BOARD[rank][3] = saved_3

    # step on (rank,2)
    saved_2 = INITIAL_BOARD[rank][2]
    INITIAL_BOARD[rank][2] = saved_king
    INITIAL_BOARD[king_start[0]][king_start[1]] = ""
    can_castle = True
    if is_king_in_check(color):
        can_castle = False
    # revert
    INITIAL_BOARD[king_start[0]][king_start[1]] = saved_king
    INITIAL_BOARD[rank][2] = saved_2

    return can_castle

def get_potential_moves(piece, rank, file):
    moves = []
    color = piece[0]
    opponent = 'b' if color == 'w' else 'w'

    if piece[1] == "P":
        direction = -1 if color == 'w' else 1
        start_row = 6 if color == 'w' else 1
        # single step
        if is_valid_position(rank+direction,file) and INITIAL_BOARD[rank+direction][file] == "":
            moves.append((rank+direction, file))
            # double step
            if rank == start_row and INITIAL_BOARD[rank+2*direction][file] == "":
                moves.append((rank+2*direction, file))
        # diagonal captures
        for dx in [-1,1]:
            r_cap = rank+direction
            f_cap = file+dx
            if is_valid_position(r_cap,f_cap):
                target = INITIAL_BOARD[r_cap][f_cap]
                if target and target[0] == opponent:
                    moves.append((r_cap,f_cap))

    elif piece[1] == "R":
        moves.extend(generate_moves_in_directions(rank,file,[(1,0),(-1,0),(0,1),(0,-1)]))

    elif piece[1] == "B":
        moves.extend(generate_moves_in_directions(rank,file,[(1,1),(1,-1),(-1,1),(-1,-1)]))

    elif piece[1] == "Q":
        moves.extend(generate_moves_in_directions(rank,file,[
            (1,0),(-1,0),(0,1),(0,-1),
            (1,1),(1,-1),(-1,1),(-1,-1)
        ]))

    elif piece[1] == "N":
        knight_moves = [(2,1),(2,-1),(-2,1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]
        for (dr,df) in knight_moves:
            rr = rank+dr
            ff = file+df
            if is_valid_position(rr,ff):
                if INITIAL_BOARD[rr][ff] == "" or INITIAL_BOARD[rr][ff][0] == opponent:
                    moves.append((rr,ff))

    elif piece[1] == "K":
        king_moves = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,1),(-1,-1)]
        for (dr,df) in king_moves:
            rr=rank+dr
            ff=file+df
            if is_valid_position(rr,ff):
                if INITIAL_BOARD[rr][ff]=="" or INITIAL_BOARD[rr][ff][0]==opponent:
                    moves.append((rr,ff))

        # castling squares
        if color=='w' and rank==7 and file==4:
            if can_castle_kingside('w'):
                moves.append((7,6))
            if can_castle_queenside('w'):
                moves.append((7,2))
        if color=='b' and rank==0 and file==4:
            if can_castle_kingside('b'):
                moves.append((0,6))
            if can_castle_queenside('b'):
                moves.append((0,2))

    return moves

def get_legal_moves(piece, rank, file):
    naive_moves = get_potential_moves(piece, rank, file)
    color = piece[0]
    legal = []
    for (r,f) in naive_moves:
        saved_piece = INITIAL_BOARD[r][f]
        INITIAL_BOARD[r][f] = piece
        INITIAL_BOARD[rank][file] = ""

        if not is_king_in_check(color):
            legal.append((r,f))

        INITIAL_BOARD[rank][file] = piece
        INITIAL_BOARD[r][f] = saved_piece
    return legal

def promote_pawn(rank, file):
    piece=INITIAL_BOARD[rank][file]
    if piece and piece[1]=='P' and (rank==0 or rank==7):
        INITIAL_BOARD[rank][file] = piece[0]+'Q'

def switch_turn():
    global current_turn
    current_turn = 'b' if current_turn=='w' else 'w'

def check_game_end():
    global game_over, winner
    if is_king_in_check(current_turn):
        moves_exist=False
        for r in range(ROWS):
            for c in range(COLS):
                if INITIAL_BOARD[r][c] and INITIAL_BOARD[r][c][0]==current_turn:
                    if get_legal_moves(INITIAL_BOARD[r][c],r,c):
                        moves_exist=True
                        break
            if moves_exist:
                break
        if not moves_exist:
            winner = 'White' if current_turn=='b' else 'Black'
            print(f'Checkmate! {winner} wins!')
            game_over=True
        else:
            print(f'{current_turn} is in check!')

def do_black_random_move():
    """
    Gathers all black's legal moves, picks one at random, executes it.
    We also replicate the castling logic from MOUSEBUTTONUP.
    """
    # 1) Collect all black pieces + their legal moves
    black_moves = []
    for r in range(ROWS):
        for c in range(COLS):
            piece = INITIAL_BOARD[r][c]
            if piece and piece[0] == 'b':
                moves = get_legal_moves(piece, r, c)
                for (nr, nf) in moves:
                    black_moves.append(((r,c), (nr,nf)))

    # if no black moves => presumably checkmate/stalemate
    if not black_moves:
        return  # do nothing, let checkmate logic handle next

    # 2) pick a random move
    (orig_r, orig_c), (dest_r, dest_c) = random.choice(black_moves)
    piece_to_move = INITIAL_BOARD[orig_r][orig_c]

    # 3) handle castling if it's the black king
    if piece_to_move[1] == 'K':
        # black short castle
        if orig_r==0 and orig_c==4 and dest_r==0 and dest_c==6:
            # move rook from (0,7)->(0,5)
            INITIAL_BOARD[0][5] = 'bR'
            INITIAL_BOARD[0][7] = ''
        # black long castle
        elif orig_r==0 and orig_c==4 and dest_r==0 and dest_c==2:
            INITIAL_BOARD[0][3] = 'bR'
            INITIAL_BOARD[0][0] = ''

    # 4) do the move
    INITIAL_BOARD[dest_r][dest_c] = piece_to_move
    INITIAL_BOARD[orig_r][orig_c] = ""
    global last_move
    last_move = [(orig_r, orig_c), (dest_r, dest_c)]

    # 5) Mark if King/Rook moved from original square
    if (orig_r, orig_c) in piece_has_moved:
        piece_has_moved[(orig_r, orig_c)] = True
    if piece_to_move[1] in ['K','R']:
        piece_has_moved[(dest_r, dest_c)] = True

    # 6) Pawn promotion (rare for black but can happen)
    promote_pawn(dest_r, dest_c)

def main():
    load_piece_images()
    running=True
    global selected_piece, selected_pos, legal_moves
    global last_move, game_over, current_turn, winner

    while running:
        mouse_pos = pygame.mouse.get_pos()

        # If it's black's turn AND the game isn't over, black does a random move automatically.
        if current_turn=='b' and not game_over:
            do_black_random_move()
            switch_turn()
            check_game_end()

        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                running=False

            elif event.type==pygame.MOUSEBUTTONDOWN and not game_over:
                # only let user move if it's White's turn
                if current_turn=='w':
                    rank = mouse_pos[1]//SQUARE_SIZE
                    file = mouse_pos[0]//SQUARE_SIZE
                    if is_valid_position(rank,file):
                        piece=INITIAL_BOARD[rank][file]
                        # Only allow selection if it's White's piece with legal moves
                        if piece and piece[0]=='w':
                            possible_legal_moves = get_legal_moves(piece, rank, file)
                            if possible_legal_moves:
                                selected_piece = piece
                                selected_pos = (rank, file)
                                legal_moves = possible_legal_moves

            elif event.type==pygame.MOUSEBUTTONUP and not game_over:
                if current_turn=='w' and selected_piece:
                    rank=mouse_pos[1]//SQUARE_SIZE
                    file=mouse_pos[0]//SQUARE_SIZE
                    orig_rank, orig_file = selected_pos
                    if is_valid_position(rank,file) and (rank,file) in legal_moves:
                        # handle castling for White
                        if selected_piece[1]=='K':
                            # White short
                            if (selected_piece[0]=='w' and orig_rank==7 and orig_file==4
                                    and rank==7 and file==6):
                                INITIAL_BOARD[7][5] = 'wR'
                                INITIAL_BOARD[7][7] = ''
                            # White long
                            elif (selected_piece[0]=='w' and orig_rank==7 and orig_file==4
                                    and rank==7 and file==2):
                                INITIAL_BOARD[7][3] = 'wR'
                                INITIAL_BOARD[7][0] = ''

                        INITIAL_BOARD[rank][file] = selected_piece
                        INITIAL_BOARD[orig_rank][orig_file] = ""
                        last_move=[(orig_rank,orig_file),(rank,file)]

                        # Mark if King/Rook moved
                        if (orig_rank,orig_file) in piece_has_moved:
                            piece_has_moved[(orig_rank,orig_file)] = True
                        if selected_piece[1] in ['K','R']:
                            piece_has_moved[(rank,file)] = True

                        promote_pawn(rank,file)
                        switch_turn()
                        check_game_end()

                    selected_piece=None
                    selected_pos=None
                    legal_moves=[]

        screen.fill((0,0,0))
        draw_board()

        # if a White piece is selected, let user drag
        if current_turn=='w' and selected_piece and not game_over:
            piece_image=PIECE_IMAGES[selected_piece]
            piece_rect=piece_image.get_rect(center=mouse_pos)
            screen.blit(piece_image,piece_rect.topleft)

        pygame.display.flip()

    pygame.quit()

if __name__=='__main__':
    main()
